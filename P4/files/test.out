int f(int a, bool b, int f) {
    int x;
    int y;
    int z;
    bool used;
}

int j() {
    int j;
}

struct Inner{
    int i;
};

struct Outer{
    struct Inner i;
};

struct Point{
    bool Point;
    int x;
    int y;
    int z;
    bool used;
};

void main() {
    bool main;
    int a;
    int d;
    int x;
    int y;
    int z;
    struct Point p;
    struct Inner i;
    struct Outer o;
    bool used;
    bool b;
    bool c;
    a(int)++;
    a(int)--;
    a(int) = d(int);
    cin >> a(int);
    cout << a(int);
    return a(int);
    if ((b(bool) == c(bool))) {
        int a;
    }
    if ((b(bool) < c(bool))) {
        int a;
    }
    else {
        int a;
    }
    while ((b(bool) > c(bool))) {
        int a;
    }
    repeat ((b(bool) <= c(bool))) {
        int a;
    }
    f(int,bool,int->int)(a(int), (!b(bool)));
    (p(Point)).x(int) = a(int);
    (p(Point)).y(int) = d(int);
    (p(Point)).z(int) = z(int);
    (p(Point)).used(bool) = (b(bool) && c(bool));
    (p(Point)).used(bool) = (b(bool) || c(bool));
    (p(Point)).x(int) = 5;
    (p(Point)).used(bool) = false;
    (p(Point)).used(bool) = true;
    a(int) = (d(int) + x(int));
    a(int) = (d(int) - x(int));
    a(int) = (d(int) * x(int));
    a(int) = (d(int) / x(int));
    a(int) = (((p(Point)).x(int) + x(int)) - ((y(int) / (p(Point)).y(int)) * z(int)));
    a(int) = (-(p(Point)).z(int));
    ((o(Outer)).i(Inner)).i(int) = 10;
    (o(Outer)).i(Inner) = i(Inner);
    (i(Inner)).i(int) = 7;
}

