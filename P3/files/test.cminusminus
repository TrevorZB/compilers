// struct declaration
struct s { 
    int a; 
    int b; 
    int c;
};

// empty formals func declaration
void func() {
    int a;
    return 2 + 2;
}

// empty body func
void empty_func() {}

// non-empty formals func declaration
int main(int c, int d) {
    // var declarations
    int a;
    int b;
    bool c;
    bool d;
    void e;
    struct s a;

    // assign to struct, perform operations with struct
    a.a = 10;
    a.b = 15;
    a.c = a.a + a.b;

    // assignments and literals
    a = "hello";
    b = 6;
    b = a;
    z = 4 * 2 + 3 / 1;
    c = true;
    d = false;

    // relationals and equalities and conditional operators
    c = a == b;
    c = a != b;
    c = a < b;
    c = a > b;
    c = a <= b;
    c = a >= b;
    c = c && d;
    c = c || d;
    c = !c;

    // math operators, and cin/cout
    i++;
    i--;
    cin >> i;
    cout << i;
    cout << "hello";
    cout << i + 7;
    i = i + i;
    i = i - i;
    i = i * i;
    i = i / i;

    // test parentheses
    a = (a + b) * c;
    a = (a + b * c);

    // return statements
    return a;
    return a + b;
    return 7;
    return true;
    return "hello";
    return;

    // if/else statement
    if (a == b && b == c) {
        int a;
        int b;
        a = b;

        // nested statement to test tab working
        if (b) {
            int a;
            a = 5;
            a = 17;
        }
    }
    else {
        int a;
        int b;
        a = b;
    }

    // while statement
    while (a == 1) {
        int b;
        int c;
        b = a;

        // test nesting of loops
        while (a && b)
        {
            int z;
            bool y;
            z = 1;
            y = true;
        }
    }

    // repeat statement
    repeat (a != 9) {
        int a;
        int b;
        a = b;
    }

    // call empty formals func
    func();

    // call non-empty formals func
    func(a, b, s.a);

    // call non-empty formals func with literals
    func(5, 7, "hello", true);
}