                fnDecl:f
                {: RESULT = f; :}
                ;

fnDecl          ::= type:t id:i LPAREN fmList:f RPAREN LCURLY fnBody:b RCURLY
                {: RESULT = new FnDeclNode(t, i, f, b); :}
                ;

fmList          ::= 
                {: RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>()); :}
                ;

fnBody          ::= declList:dl stmtList:sl
                {: RESULT = new FnBodyNode(new DeclListNode(dl), sl); :}
                ;

stmtList        ::= 
                {: RESULT = new StmtListNode(new LinkedList<StmtNode>()); :}
                ;









fnDecl          ::= type:t id:i LPAREN fmList:f RPAREN LCURLY fnBody:b RCURLY
                {: RESULT = new FnDeclNode(t, i, f, b); :}
                ;

fnBody          ::= declList:dl stmtList:sl
                {: RESULT = new FnBodyNode(dl, sl) :}
                ;

fmDecl          ::= type:t id:i COMMA
                {: RESULT = new FormalDeclNode(t, i); :}
                |
                type:t id:i LPAREN
                {: RESULT = new FormalDeclNode(t, i); :}
                ;




                                |
                fnDecl:f
                {: RESULT = f; :}
                |
                fmDecl:f
                {: RESULT = f; :}
                ;

exp             ::=intlit:i
                {: RESULT = i; :}
                ;

stmt            ::= wstmt:w exp:e SEMICOLON
                {: RESULT = new WriteStmtNode(e); :}
                ;




                
fmList          ::= fmList:fl fmDecl:fd
                {: fl.addLast(fd); RESULT = fl; :}
                |
                {: RESULT = new LinkedList<FormalDeclNode>(); :}
                ;

stmtList        ::= stmtList:stl stmt:st
                {: stl.addLast(st); RESULT = stl; :}
                |
                {: RESULT = new LinkedList<StmtNode>(); :}
                ;